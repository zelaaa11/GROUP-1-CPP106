/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.sql_trial;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hazel
 */
public class ORDER_MANAGEMENT extends javax.swing.JInternalFrame {

    /**
     * Creates new form ORDER_MANAGEMENT
     */
            private static DefaultTableModel tableData = new DefaultTableModel(
        new Object[][] {}, // Initial data
        new String[] {"ID", "MEAL", "PRICE", "QUANTITY", "TOTAL PRICE", "STATUS"} // Column headers
    );
            
        private static final String DB_URL = "jdbc:mysql://localhost:3306/ultra";
        
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "Password123!";
    
    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (visible) {
            pending_table.setModel(tableData); // Bind the table model when visible
        }
    }
    private void loadDataFromDatabase() {
        DefaultTableModel model = (DefaultTableModel) pending_table.getModel();
    model.setRowCount(0); // Clear existing rows

    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT orderId, mealName, mealPrice, quantity, totalPrice, status FROM orders")) {

        while (rs.next()) {
            String orderId = rs.getString("orderId");
            String mealName = rs.getString("mealName");
            String mealPrice = rs.getString("mealPrice");
            String quantity = rs.getString("quantity");
            String totalPrice = rs.getString("totalPrice");
            String status = rs.getString("status");
            
            
            System.out.println("Retrieved: " + orderId + ", " + mealName + ", " + mealPrice + "," + quantity + ", " + totalPrice + "," + status );
            
            model.addRow(new Object[]{orderId, mealName, mealPrice, quantity, totalPrice, status});
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Failed to load data from database: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    public ORDER_MANAGEMENT() {
        initComponents();
        pending_table.setModel(tableData);
        loadDataFromDatabase();
        BasicInternalFrameUI bui = (BasicInternalFrameUI) this.getUI();
        bui.setNorthPane(null);
        bui.setWestPane(null);
        bui.setSouthPane(null);
        bui.setEastPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pending_table = new javax.swing.JTable();
        release = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 102, 204));

        pending_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "MEAL", "PRICE ", "QUANTITY", "TOTAL PRICE", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(pending_table);

        release.setText("release");
        release.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseActionPerformed(evt);
            }
        });

        jButton2.setText("delete");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(381, 381, 381)
                .addComponent(release)
                .addGap(75, 75, 75)
                .addComponent(jButton2)
                .addContainerGap(344, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(release)
                    .addComponent(jButton2))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void releaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseActionPerformed
    int selectedRow = pending_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to release", "No Row Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String orderId = pending_table.getValueAt(selectedRow, 0).toString();
        String mealName = pending_table.getValueAt(selectedRow, 1).toString();
        String mealPrice = pending_table.getValueAt(selectedRow, 2).toString();
        String quantity = pending_table.getValueAt(selectedRow, 3).toString();
        String totalPrice = pending_table.getValueAt(selectedRow, 4).toString();
        String status = pending_table.getValueAt(selectedRow, 5).toString();

        String moveQuery = "INSERT INTO orders_serve (orderId, mealName, mealPrice, quantity, totalPrice, status) VALUES (?, ?, ?, ?, ?, 'serve')";
        String deleteQuery = "DELETE FROM orders WHERE orderId = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            // Start transaction
            conn.setAutoCommit(false);

            try (PreparedStatement stmtInsert = conn.prepareStatement(moveQuery)) {
                stmtInsert.setString(1, orderId);
                stmtInsert.setString(2, mealName);
                stmtInsert.setString(3, mealPrice);
                stmtInsert.setString(4, quantity);
                stmtInsert.setString(5, totalPrice);
                stmtInsert.executeUpdate();
            }

            try (PreparedStatement stmtDelete = conn.prepareStatement(deleteQuery)) {
                stmtDelete.setString(1, orderId);
                stmtDelete.executeUpdate();
            }

            // Commit transaction
            conn.commit();
            JOptionPane.showMessageDialog(this, "Row released successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Remove row from table
            tableData.removeRow(selectedRow);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error releasing row: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_releaseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable pending_table;
    private javax.swing.JButton release;
    // End of variables declaration//GEN-END:variables
}
